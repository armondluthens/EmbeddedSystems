;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;        Lab 4 - Simple Multimeter       ;
;    Armond Luthens and Charles Rathe    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.include "m88padef.inc"      ; Include definitions for bigger board
.dseg
	dtxt: .DB 0x00,0x00,0x00,0x00,0x00,0x00

.cseg

;-----------------------------------;
; ISR Vector Table                  ;
;-----------------------------------;
.org 0x0000                         ;
	rjmp RESET    ; Reset ISR       ;
;-----------------------------------;
.org 0x0001                         ;
	rjmp BUTTON   ; INT Button ISR  ;
;-----------------------------------;
.org 0x0005                         ;
	rjmp TIMER    ; TMR_OVF ISR     ;
;-----------------------------------;

RESET:

; Register Aliasing
;-----------------------

	.def STRLEN = r13	; Stores length of string
	.def OUTPUT = r14   ; Stores either voltage or frequency to output
	.def CHAR = r15     ; Holds character to send to LCD
	.def STATE = r16    ; Register to hold if it's voltage or frequency state (0 is voltage, 1 is freq)
	.def TMP = r17      ; Register for holding temporary variables

	.def drem16uL = r18 ; Registers for division
	.def drem16uH = r19
	.def dres16uL = r20
	.def dres16uH = r21
	.def dd16uL = r22
	.def dd16uH = r23
	.def dv16uL = r24
	.def dv16uH = r25
	.def dcnt16u =r26


; Messages in static memory
;--------------------------------

; Note these have to be even number of characters, including 0x00 (stop character)

volt_msg: .db "Voltmeter", 0x00

freq_msg: .db "Frequency", 0x00

volt_bot: .db "V =", 0x00

freq_bot: .db "F =", 0x00

volt_units: .db "V", 0x00
			
freq_units: .db "kHz", 0x00

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                   Initialization                                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Configure I/O
;-----------------------------------------------------

	ldi TMP, 0xF	; PC0-PC3 is output (Data Lines)
	out DDRC, TMP

	ldi TMP, 0x38   ; PB3-PB5 is output (Enable/RS) -> We may only need two of these because R/W is always write for us
	out DDRB, TMP   ; At this point I'm thinking PB3 is RS and PB4 is Enable

	; So check it out, the way this works, we set ADMUX register to make 5V the VRef (VCC)
	; And then just use division to figure out what the voltage is between 5V and 0V

	ldi TMP, 0x40 ; Setting the REF1, REF0 to be 01 (Setting VREF to VCC)
	out ADMUX, TMP

	; Fuck there is also a register for turning ADC on and interrupting while it is doing it's thing
	; Aww shit

; Initial Values
;--------------------
	
	ldi STATE, 0x00   ; Arbitrarily start in voltage mode

; Initialize LCD and Timers
;-----------------------------
	rcall LCD_Init  ; Initialize LCD

	rcall Timer_Init



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                       Main Loop                                     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

main:
	; Do nothing but wait for overflows
	rjmp main


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                   Timer Functions                                   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Timer_Init:

	ret




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                  Interrupt Functions                                ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;---------------------
; Button Interrupt
;---------------------------------------------------------------------------

BUTTON:				; Uhh pretty sure we just have to change the state to Freqency and the timer interrupt will do the rest
	STATE = 0x1
	reti

;--------------------
; Timer Interrupt
;----------------------------------------------------------------------------

TIMER:   

	cli

	rcall LCD_init

	cpi STATE, 0x0        ; If in voltage state, set top line as "voltmeter"
	breq load_voltage     ; Otherwise set it to "Frequency Meter"
	rcall load_freq

	cpi STATE, 0x0        ; Check which state it's in, depending on which one, store voltage or frequency to be outputted
	breq get_voltage
	rcall get_frequency


	ldi r30,LOW(dtxt)      ; Load Z register low
    ldi r31,HIGH(dtxt)     ; Load Z register high
    rcall displayDstring

	sei

	reti







;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                   LCD   Functions                                   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LCD_Init:


	ret
;-------------------------------------------------------------------------------------

DisplayVoltage:



	ret

;---------------------------------------------------------------------------------------

DisplayCString:
	lpm             ; r0 <-- first byte
	swap r0         ; Upper nibble in place
	out PORTC,r0    ; Send upper nibble out
	rcall LCDStrobe ; Latch nibble
	rcall Delay100  ; Wait
	swap r0         ; Lower nibble in place
	out PORTC,r0    ; Send lower nibble out
	rcall LCDStrobe ; Latch nibble
	rcall Delay100  ; Wait
	adiw zl,1       ; Increment Z pointer
	dec STRLEN      ; Repeat until all characters are out
	brne DisplayCString       
	ret

DisplayDString:
	
	ld r0,Z+
 	tst r0 				; Reached end of message ?
	breq done_dsd 		; Yes => quit
	swap r0 			; Upper nibble in place
	out PORTC,r0 		; Send upper nibble out
	rcall LCDStrobe 	; Latch nibble
	swap r0 			; Lower nibble in place
	out PORTC,r0 		; Send lower nibble out
	rcall LCDStrobe 	; Latch nibble
	rjmp DisplayDString
done_dsd:
    ret

LoadVoltage:		
	; Load 'Voltmeter' and display		    
	ldi r30, LOW(2*volt_msg)
	ldi r31, 2*HIGH(volt_msg)
	ldi STRLEN, 0xA
	rcall DisplayCString
	rcall SecondLine
	; Load 'V =' and display
	ldi r30, LOW(2*volt_bot)
	ldi r31, 2*HIGH(volt_bot)
	ldi STRLEN, 0x4
	rcall DisplayCString
	; Get Voltage, format it, store it in SRAM and display it
	rcall GetVoltage
	rcall DisplayDString
	; Load "V" and display
	ldi r30, LOW(2*volt_units)
	ldi r31, 2*HIGH(volt_units)
	ret


LoadFreq:    
	; Load "Frequency" and display                  
	ldi r30, LOW(2*freq_msg)
	ldi r31, 2*HIGH(freq_msg)
	ldi STRLEN, 0xA
	rcall DisplayCString
	rcall SecondLine
	; Load "F =" and display
	ldi r30, LOW(2*freq_bot)
	ldi r31, 2*HIGH(freq_bot)
	ldi STRLEN, 0x4
	rcall DisplayCString
	; Get Frequency, format it, store it in SRAM and display it
	rcall GetFrequency
	rcall DisplayDString
	; Load "F" and display
	ldi r30, LOW(2*freq_units)
	ldi r31, 2*HIGH(freq_units)

	ret

;--------------------------
; Control Line Functions
;--------------------------

StrobeLCD:
	sbi PORTB, 4
	rcall Delay40u 
	cbi PORTB, 4
	ret


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                  Delays/Helpers                                     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;----------------
; ADC Functions
;----------------

GetVoltage:









	mov dd16uL, r25 ; LSB of number to display
	mov dd16uH, r26 ; MSB of number to display

	ldi dv16uL,low(10)
	ldi dv16uH,high(10)

	; Store terminating for the string.
	ldi TMP,0x00 ; Terminating NULL
	sts dtxt+4, TMP ; Store in RAM
	; Divide the number by 10 and format remainder.
	rcall div16u ; Result: r17:r16, rem: r15:r14
	ldi TMP, 0x30
	add drem16uL, TMP ; Convert to ASCII
	sts dtxt+3,drem16uL ; Store in RAM
	; Generate decimal point.
	ldi TMP,0x2e ; ASCII code for .
	sts dtxt+2,TMP ; Store in RAM

	ret

GetFreq:

	.dseg
	dtxt: .DB 0x00,0x00,0x00,0x00,0x00,0x00
	.cseg

	; HERE NEED TO READ IN FREQUENCY

	mov dd16uL,r25 ; LSB of number to display
	mov dd16uH,r26 ; MSB of number to display

	ldi dv16uL,low(10)
	ldi dv16uH,high(10)
	; Store terminating for the string.
	ldi r20,0x00 ; Terminating NULL
	sts dtxt+4,r20 ; Store in RAM
	; Divide the number by 10 and format remainder.
	rcall div16u ; Result: r17:r16, rem: r15:r14
	ldi r20,0x30
	add r14,r20 ; Convert to ASCII
	sts dtxt+3,r14 ; Store in RAM
	; Generate decimal point.
	ldi r20,0x2e ; ASCII code for .
	sts dtxt+2,r20 ; Store in RAM

	ret

;-----------
; Delays
;-----------

Delay100:
	ret

Delay40u:
	ret

;   Division 
;-------------------

div16u:	
	clr	drem16uL				; clear remainder Low byte
	sub	drem16uH,drem16uH		; clear remainder High byte and carry
	ldi	dcnt16u, 17				; init loop counter
	d16u_1:	
	rol	dd16uL		        	; shift left dividend
	rol	dd16uH
	dec	dcnt16u		            ; decrement counter
	brne	d16u_2		        ; if done
	ret			                ; return
	d16u_2:	
	rol	drem16uL				; shift dividend into remainder
	rol	drem16uH
	sub	drem16uL,dv16uL			; remainder = remainder - divisor
	sbc	drem16uH,dv16uH	
	brcc	d16u_3				; if result negative
	add	drem16uL,dv16uL			; restore remainder
	adc	drem16uH,dv16uH
	clc							; clear carry to be shifted into result
	rjmp	d16u_1				; else
	d16u_3:	
	sec							; set carry to be shifted into result
	rjmp	d16u_1